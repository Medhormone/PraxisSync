model Language {
  id String @id @default(uuid(7)) @db.Uuid

  code  String @unique
  name  String
  order Int    @default(autoincrement())

  headerTranslations    HeaderTranslation[]
  introduceTranslations IntroduceTranslation[]
  newsTranslations      NewsTranslation[]
  serviceTranslations   ServiceTranslation[]
  FAQTranslations       FAQTranslation[]
  blogTranslations      BlogTranslation[]
  categoryTranslations  CategoryTranslation[]
  contactTranslations   ContactTranslation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("languages")
}

model File {
  id String @id @default(uuid()) @db.Uuid

  name String
  path String
  size Int

  header    Header?  @relation(fields: [headerId], references: [id], onDelete: Cascade)
  headerId  String?  @unique @db.Uuid
  news      News?    @relation(fields: [newsId], references: [id], onDelete: Cascade)
  newsId    String?  @unique @db.Uuid
  blog      Blog?    @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId    String?  @unique @db.Uuid
  contact   Contact? @relation(fields: [contactId], references: [id], onDelete: Cascade)
  contactId String?  @unique @db.Uuid

  serviceIcon       Service? @relation("ServiceIcon")
  serviceBackground Service? @relation("ServiceBackground")

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("files")
}

model RefreshToken {
  id String @id @default(uuid(7)) @db.Uuid

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.Uuid

  token     String   @unique
  expiresAt DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("refresh_tokens")
}

model Header {
  id String @id @default(uuid(7)) @db.Uuid

  logo File?

  translations HeaderTranslation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  fileId    String?

  @@map("header")
}

model Introduce {
  id String @id @default(uuid(7)) @db.Uuid

  translations IntroduceTranslation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  fileId    String?

  @@map("introduce")
}

model News {
  id String @id @default(uuid(7)) @db.Uuid

  slug          String            @unique
  background    File?
  translations  NewsTranslation[]
  showInLanding Boolean           @default(false)
  order         Int?

  metaTitle       String?
  metaDescription String?
  metaKeywords    String?
  metaImage       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("news")
}

model Service {
  id String @id @default(uuid()) @db.Uuid

  translations ServiceTranslation[]

  icon   File?   @relation("ServiceIcon", fields: [iconId], references: [id], onDelete: Cascade)
  iconId String? @unique @db.Uuid

  background   File?   @relation("ServiceBackground", fields: [backgroundId], references: [id], onDelete: Cascade)
  backgroundId String? @unique @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("services")
}

model FAQ {
  id String @id @default(uuid(7)) @db.Uuid

  order        Int              @default(autoincrement())
  translations FAQTranslation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("faqs")
}

model Blog {
  id String @id @default(uuid(7)) @db.Uuid

  background   File?
  categories   Category[]
  starredUsers User[]            @relation("BlogStars")
  stars        Int               @default(0)
  translations BlogTranslation[]

  slug          String  @unique
  showInLanding Boolean @default(false)
  landingOrder  Int     @default(0)

  metaTitle       String?
  metaDescription String?
  metaKeywords    String?
  metaImage       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("blogs")
}

model Category {
  id String @id @default(uuid()) @db.Uuid

  blogs        Blog[]
  translations CategoryTranslation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("categories")
}

model Contact {
  id String @id @default(uuid()) @db.Uuid

  location     String?
  background   File?
  translations ContactTranslation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contacts")
}
